; Config values must be in a format parsable by JSON (i.e. no tuples, single-quoted strings, capitalised booleans or None)

[BACKGROUND]

; How much larger the background is than the bounding box of all other elements of the plot.
background_proportion = 1.2

; The colour of the background.
; Can be string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
background_colour = "Black"

[AXIS]

; Length, in cm, of the axes
axis_length = 10

; The distance between the centre of the plot and the start of each axis, as a proportion of the axis length
proportional_offset_from_intersection = 0.2

; A list of node classes whose axes are to be split into 2 (allowing visualisation of edges between nodes of the same class
split_axes = []

; Angle, in degrees, between split axes
split_angle = 30

; Whether the set of nodes on an axis should be spread to take the whole length of the axis, rather than being compared to nodes on other axes as well
normalise_axis_length = false

; Colour of the axes.
; Can be string corresponding to one of PyX's named RGB or CMYK colours_, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
axis_colour = "Gray"

; Thickness of the axes
axis_thickness = 0.15

; How to distribute nodes on the axes. Use either an attribute name, or 'degree' for their degree
order_nodes_by = "degree"

[AXIS_LABEL]

; Colour of the axis labels.
; Can be string corresponding to one of PyX's named RGB or CMYK colours_, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
label_colour = "White"

; Point size of the axis labels
label_size = 15

; How far the label should be from the end of the axis, as a proportion of the length of the axis.
label_spacing = 0.1

[NODE]

; Whether to spread the nodes evenly along the axis
normalise_node_distribution = false

; String of 'colour' or 'size'
node_superimpose_representation = "size"

; Range of radiuses of nodes. If node_superimpose_representation is 'colour', the minimum will be used
node_size_range = [0.08, 0.3]

; Colour gradient from which to select node colours.
; Should be a string corresponding to one of PyX's named colour gradients_.
; See here for gradient reference: http://pyx.sourceforge.net/manual/gradientname.html
node_colour_gradient = "WhiteGreen"

; Default colour of nodes.
; Can be string corresponding to one of PyX's named RGB or CMYK colours_, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
default_node_colour = "green"

[EDGE]

; Range of edge thicknesses to be used, as a
edge_thickness_range = [0.002, 0.16]

; What attribute of the edge should be used to colour it. Should be a string referring to the attribute, or 'random'
edge_colour_attribute = "weight"

; Whether to produce a legend of the edges based on their colour
edge_category_legend = false

; Gradient from which to select edge colours.
; Should be a string corresponding to one of PyX's named colour gradients_.
; See here for gradient reference: http://pyx.sourceforge.net/manual/gradientname.html
edge_colour_gradient = "WhiteRed"

; Default colour of edges.
; Can be string corresponding to one of PyX's named RGB or CMYK colours_, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
default_edge_colour = "White"

; Dict of edge categories and the colours which should represent them
edge_category_colours = null

; Whether the edges should be curved
curved_edges = true

; Whether to spread edge colours evenly along the gradient
normalise_edge_colours = false
