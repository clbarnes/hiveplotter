; Config values must be in a format parsable by JSON (i.e. no tuples, single-quoted strings, capitalised booleans or None)

[BACKGROUND]

; How much larger the background is than the bounding box of all other elements of the plot.
background_proportion = 1.2

; The colour of the background.
; Can be string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
background_colour = "Black"

[AXIS]

; Length, in cm, of the axes
axis_length = 10

; The distance between the centre of the plot and the start of each axis, as a proportion of the axis length
proportional_offset_from_intersection = 0.2

; A list of node classes whose axes are to be split into 2 (allowing visualisation of edges between nodes of the same class
split_axes = []

; Angle, in degrees, between split axes
split_angle = 30

; Whether the set of nodes on an axis should be spread to take the whole length of the axis, rather than being compared to nodes on other axes as well
normalise_axis_length = false

; Colour of the axes.
; Can be string corresponding to one of PyX's named RGB or CMYK colours_, a 3- or 4-length tuple of RGB or CMYK values, or a greyscale value between 0 and 1.
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
axis_colour = "Gray"

; Thickness of the axes
axis_thickness = 0.15

; How to distribute nodes on the axes. Use either an attribute name, or "degree" for their degree
order_nodes_by = "degree"

[AXIS_LABEL]

; Colour of the axis labels.
; Can be string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length list of RGB or CMYK values,
; or a greyscale value between 0 and 1. Default "White"
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
label_colour = "White"

; Point size of the axis labels
; float, default 15
label_size = 15

; How far the label should be from the end of the axis, as a proportion of the length of the axis.
; float, default 0.1
label_spacing = 0.1

[NODE]

; Which attribute of the nodes to use in order to split them into the 3 primary axes
; hashable, default "type"
node_class_attribute = "type"

; If there are more than 3 different values of this attribute, or if you want them to appear in a particular clockwise
; order, specify here.
; list, default null
node_class_values = null

; Whether to make each class of nodes fill up the whole of their axis
; boolean, default false
spread_nodes = false

; Whether to evenly space all nodes
; bool, default false
normalise_node_distribution = false

; How to represent colocated nodes
; string of "colour" or "size", default "size"
node_superimpose_representation = "size"

; Range of radiuses of nodes. If node_superimpose_representation is 'colour', the minimum will be used
; list, default [0.08, 0.3]
node_size_range = [0.08, 0.3]

; Colour gradient from which to select node colours.
; Should be a string corresponding to one of PyX's named colour gradients, default "WhiteGreen"
; See here for gradient reference: http://pyx.sourceforge.net/manual/gradientname.html
node_colour_gradient = "WhiteGreen"

; Default colour of nodes.
; Can be string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length tuple of RGB or CMYK values,
; or a greyscale value between 0 and 1. Default "green"
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
default_node_colour = "green"

[EDGE]

; Range of edge thicknesses to be used
; list
edge_thickness_range = [0.002, 0.16]

; What attribute of the edge should be used to colour it.
; hashable, or "random", defeault "weight"
edge_colour_attribute = "weight"

; Whether to produce a legend of the edges based on their colour
; bool, default false
edge_category_legend = false

; Gradient from which to select edge colours.
; Should be a string corresponding to one of PyX's named colour gradients. Default "WhiteRed"
; See here for gradient reference: http://pyx.sourceforge.net/manual/gradientname.html
edge_colour_gradient = "WhiteRed"

; Default colour of edges.
; Can be string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length tuple of RGB or CMYK values,
; or a greyscale value between 0 and 1. Default "White"
; See here for colour reference: http://pyx.sourceforge.net/manual/colorname.html
default_edge_colour = "White"

; Dict of edge categories and the colours which should represent them
; dict of edge category to string corresponding to one of PyX's named RGB or CMYK colours, a 3- or 4-length tuple of
; RGB or CMYK values, or a greyscale value between 0 and 1. Default null
edge_category_colours = null

; Whether the edges should be curved
; bool, default true
curved_edges = true

; Whether to spread edge colours evenly along the gradient
; bool, default false
normalise_edge_colours = false
